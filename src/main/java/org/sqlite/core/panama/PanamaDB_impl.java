package org.sqlite.core.panama;

import org.sqlite.core.panama.DBHandle;
import org.sqlite.core.panama.PrepStmt;

import org.sqlite.core.panama.PanamaDB;
import jpassport.Utils;
import java.lang.invoke.MethodHandle;
import jdk.incubator.foreign.*;
import java.util.HashMap;
import static jdk.incubator.foreign.MemoryAccess.*;
import static jdk.incubator.foreign.MemoryLayout.PathElement.*;
import static jdk.incubator.foreign.CLinker.*;

/**
 * This is code generated by JPassport.
 */
public class PanamaDB_impl implements PanamaDB {
    HashMap<String, MethodHandle> m_methods;
    private static final GroupLayout DBHandleLayout = MemoryLayout.structLayout(
		C_LONG_LONG.withName("handle"));

	private static final long[] DBHandleLayoutOffsets = new long[] {
		DBHandleLayout.byteOffset(groupElement("handle")),
	};

private static final GroupLayout PrepStmtLayout = MemoryLayout.structLayout(
		C_LONG_LONG.withName("handle"));

	private static final long[] PrepStmtLayoutOffsets = new long[] {
		PrepStmtLayout.byteOffset(groupElement("handle")),
	};



    public PanamaDB_impl(HashMap<String, MethodHandle> methods)
    {
        m_methods = methods;
        init();
    }

    private MemorySegment storeDBHandle(SegmentAllocator scope, DBHandle rec) {
        return storeDBHandle(scope, new DBHandle[] {rec});
    };

    private MemorySegment storeDBHandle(SegmentAllocator scope, DBHandle[] recs) {
        long size = DBHandleLayout.byteSize();
        MemorySegment memStruct = scope.allocate(size);

        long offset = 0;
        for (DBHandle rec : recs) {
		setLongAtOffset(memStruct, DBHandleLayoutOffsets[0] + offset, rec.handle());
		offset += size;
	}

		return memStruct;
	}

    private MemorySegment storePrepStmt(SegmentAllocator scope, PrepStmt rec) {
        return storePrepStmt(scope, new PrepStmt[] {rec});
    };

    private MemorySegment storePrepStmt(SegmentAllocator scope, PrepStmt[] recs) {
        long size = PrepStmtLayout.byteSize();
        MemorySegment memStruct = scope.allocate(size);

        long offset = 0;
        for (PrepStmt rec : recs) {
		setLongAtOffset(memStruct, PrepStmtLayoutOffsets[0] + offset, rec.handle());
		offset += size;
	}

		return memStruct;
	}

    private DBHandle readDBHandle(MemorySegment memStruct, DBHandle rec) {
        GroupLayout layout = DBHandleLayout;
		var handle = getLongAtOffset(memStruct, DBHandleLayoutOffsets[0]);
		return new DBHandle(handle);
	}

    private PrepStmt readPrepStmt(MemorySegment memStruct, PrepStmt rec) {
        GroupLayout layout = PrepStmtLayout;
		var handle = getLongAtOffset(memStruct, PrepStmtLayoutOffsets[0]);
		return new PrepStmt(handle);
	}

    private MethodHandle m_sqlite3_column_decltype;
    public String sqlite3_column_decltype(long v1,int v2)
    {
        try  {
            
            var ret = (MemoryAddress) m_sqlite3_column_decltype.invokeExact(v1,v2);
            
            return Utils.readString(ret);
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_column_name;
    public String sqlite3_column_name(long v1,int v2)
    {
        try  {
            
            var ret = (MemoryAddress) m_sqlite3_column_name.invokeExact(v1,v2);
            
            return Utils.readString(ret);
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_column_type;
    public int sqlite3_column_type(long v1,int v2)
    {
        try  {
            
            var ret = (int) m_sqlite3_column_type.invokeExact(v1,v2);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_column_value;
    public MemoryAddress sqlite3_column_value(long v1,int v2)
    {
        try  {
            
            var ret = (MemoryAddress) m_sqlite3_column_value.invokeExact(v1,v2);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_compileoption_used;
    public int sqlite3_compileoption_used(String v1)
    {
        try (var scope = ResourceScope.newConfinedScope();) {
            var allocator = SegmentAllocator.ofScope(scope);
		var vv1 = v1 == null ? MemoryAddress.NULL : toCString(v1, allocator).address();

            var ret = (int) m_sqlite3_compileoption_used.invokeExact(vv1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_value_int64;
    public long sqlite3_value_int64(MemoryAddress v1)
    {
        try  {
            
            var ret = (long) m_sqlite3_value_int64.invokeExact(v1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_bind_parameter_count;
    public int sqlite3_bind_parameter_count(long v1)
    {
        try  {
            
            var ret = (int) m_sqlite3_bind_parameter_count.invokeExact(v1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_value_double;
    public double sqlite3_value_double(MemoryAddress v1)
    {
        try  {
            
            var ret = (double) m_sqlite3_value_double.invokeExact(v1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_column_text;
    public String sqlite3_column_text(long v1,int v2)
    {
        try  {
            
            var ret = (MemoryAddress) m_sqlite3_column_text.invokeExact(v1,v2);
            
            return Utils.readString(ret);
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_value_bytes;
    public int sqlite3_value_bytes(MemoryAddress v1)
    {
        try  {
            
            var ret = (int) m_sqlite3_value_bytes.invokeExact(v1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_progress_handler;
    public void sqlite3_progress_handler(long v1,int v2,MemoryAddress v3,MemoryAddress v4)
    {
        try  {
            
             m_sqlite3_progress_handler.invokeExact(v1,v2,v3,v4);
            
            
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_commit_hook;
    public void sqlite3_commit_hook(long v1,MemoryAddress v2,MemoryAddress v3)
    {
        try  {
            
             m_sqlite3_commit_hook.invokeExact(v1,v2,v3);
            
            
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_rollback_hook;
    public void sqlite3_rollback_hook(long v1,MemoryAddress v2,MemoryAddress v3)
    {
        try  {
            
             m_sqlite3_rollback_hook.invokeExact(v1,v2,v3);
            
            
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_update_hook;
    public void sqlite3_update_hook(long v1,MemoryAddress v2,MemoryAddress v3)
    {
        try  {
            
             m_sqlite3_update_hook.invokeExact(v1,v2,v3);
            
            
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_column_bytes;
    public int sqlite3_column_bytes(long v1,int v2)
    {
        try  {
            
            var ret = (int) m_sqlite3_column_bytes.invokeExact(v1,v2);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_column_double;
    public double sqlite3_column_double(long v1,int v2)
    {
        try  {
            
            var ret = (double) m_sqlite3_column_double.invokeExact(v1,v2);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_compileoption_get;
    public String sqlite3_compileoption_get(int v1)
    {
        try  {
            
            var ret = (MemoryAddress) m_sqlite3_compileoption_get.invokeExact(v1);
            
            return Utils.readString(ret);
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_result_error;
    public void sqlite3_result_error(MemoryAddress v1,String v2,int v3)
    {
        try (var scope = ResourceScope.newConfinedScope();) {
            var allocator = SegmentAllocator.ofScope(scope);
		var vv2 = v2 == null ? MemoryAddress.NULL : toCString(v2, allocator).address();

             m_sqlite3_result_error.invokeExact(v1,vv2,v3);
            
            
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_column_int64;
    public long sqlite3_column_int64(long v1,int v2)
    {
        try  {
            
            var ret = (long) m_sqlite3_column_int64.invokeExact(v1,v2);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_column_table_name;
    public String sqlite3_column_table_name(long v1,int v2)
    {
        try  {
            
            var ret = (MemoryAddress) m_sqlite3_column_table_name.invokeExact(v1,v2);
            
            return Utils.readString(ret);
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_bind_double;
    public int sqlite3_bind_double(long v1,int v2,double v3)
    {
        try  {
            
            var ret = (int) m_sqlite3_bind_double.invokeExact(v1,v2,v3);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_column_count;
    public int sqlite3_column_count(long v1)
    {
        try  {
            
            var ret = (int) m_sqlite3_column_count.invokeExact(v1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_clear_bindings;
    public int sqlite3_clear_bindings(long v1)
    {
        try  {
            
            var ret = (int) m_sqlite3_clear_bindings.invokeExact(v1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_libversion_number;
    public int sqlite3_libversion_number()
    {
        try  {
            
            var ret = (int) m_sqlite3_libversion_number.invokeExact();
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_total_changes;
    public int sqlite3_total_changes(long v1)
    {
        try  {
            
            var ret = (int) m_sqlite3_total_changes.invokeExact(v1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_enable_load_extension;
    public int sqlite3_enable_load_extension(long v1,int v2)
    {
        try  {
            
            var ret = (int) m_sqlite3_enable_load_extension.invokeExact(v1,v2);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_backup_step;
    public int sqlite3_backup_step(long v1,int v2)
    {
        try  {
            
            var ret = (int) m_sqlite3_backup_step.invokeExact(v1,v2);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_result_text;
    public void sqlite3_result_text(MemoryAddress v1,String v2,int v3,long v4)
    {
        try (var scope = ResourceScope.newConfinedScope();) {
            var allocator = SegmentAllocator.ofScope(scope);
		var vv2 = v2 == null ? MemoryAddress.NULL : toCString(v2, allocator).address();

             m_sqlite3_result_text.invokeExact(v1,vv2,v3,v4);
            
            
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_table_column_metadata;
    public int sqlite3_table_column_metadata(long v1,String v2,String v3,String v4,MemoryAddress v5,MemoryAddress v6,int[] v7,int[] v8,int[] v9)
    {
        try (var scope = ResourceScope.newConfinedScope();) {
            var allocator = SegmentAllocator.ofScope(scope);
		var vv2 = v2 == null ? MemoryAddress.NULL : toCString(v2, allocator).address();
var vv3 = v3 == null ? MemoryAddress.NULL : toCString(v3, allocator).address();
var vv4 = v4 == null ? MemoryAddress.NULL : toCString(v4, allocator).address();
var vv7 = Utils.toMS(allocator, v7);
var vv8 = Utils.toMS(allocator, v8);
var vv9 = Utils.toMS(allocator, v9);

            var ret = (int) m_sqlite3_table_column_metadata.invokeExact(v1,vv2,vv3,vv4,v5,v6,Utils.toAddr(vv7),Utils.toAddr(vv8),Utils.toAddr(vv9));
            Utils.toArr(v7, vv7);
Utils.toArr(v8, vv8);
Utils.toArr(v9, vv9);

            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_backup_finish;
    public void sqlite3_backup_finish(long v1)
    {
        try  {
            
             m_sqlite3_backup_finish.invokeExact(v1);
            
            
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_backup_init;
    public long sqlite3_backup_init(long v1,String v2,long v3,String v4)
    {
        try (var scope = ResourceScope.newConfinedScope();) {
            var allocator = SegmentAllocator.ofScope(scope);
		var vv2 = v2 == null ? MemoryAddress.NULL : toCString(v2, allocator).address();
var vv4 = v4 == null ? MemoryAddress.NULL : toCString(v4, allocator).address();

            var ret = (long) m_sqlite3_backup_init.invokeExact(v1,vv2,v3,vv4);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_result_int64;
    public void sqlite3_result_int64(MemoryAddress v1,long v2)
    {
        try  {
            
             m_sqlite3_result_int64.invokeExact(v1,v2);
            
            
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_create_function;
    public int sqlite3_create_function(long v1,String v2,int v3,int v4,long v5,MemoryAddress v6,MemoryAddress v7,MemoryAddress v8)
    {
        try (var scope = ResourceScope.newConfinedScope();) {
            var allocator = SegmentAllocator.ofScope(scope);
		var vv2 = v2 == null ? MemoryAddress.NULL : toCString(v2, allocator).address();

            var ret = (int) m_sqlite3_create_function.invokeExact(v1,vv2,v3,v4,v5,v6,v7,v8);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_enable_shared_cache;
    public int sqlite3_enable_shared_cache(int v1)
    {
        try  {
            
            var ret = (int) m_sqlite3_enable_shared_cache.invokeExact(v1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_result_double;
    public void sqlite3_result_double(MemoryAddress v1,double v2)
    {
        try  {
            
             m_sqlite3_result_double.invokeExact(v1,v2);
            
            
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_busy_timeout;
    public void sqlite3_busy_timeout(long v1,int v2)
    {
        try  {
            
             m_sqlite3_busy_timeout.invokeExact(v1,v2);
            
            
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_result_blob;
    public void sqlite3_result_blob(MemoryAddress v1,byte[] v2,int v3,long v4)
    {
        try (var scope = ResourceScope.newConfinedScope();) {
            var allocator = SegmentAllocator.ofScope(scope);
		var vv2 = Utils.toMS(allocator, v2);

             m_sqlite3_result_blob.invokeExact(v1,Utils.toAddr(vv2),v3,v4);
            Utils.toArr(v2, vv2);

            
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_column_blob;
    public MemoryAddress sqlite3_column_blob(long v1,int v2)
    {
        try  {
            
            var ret = (MemoryAddress) m_sqlite3_column_blob.invokeExact(v1,v2);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_result_null;
    public void sqlite3_result_null(MemoryAddress v1)
    {
        try  {
            
             m_sqlite3_result_null.invokeExact(v1);
            
            
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_create_window_function;
    public int sqlite3_create_window_function(long v1,String v2,int v3,int v4,long v5,MemoryAddress v6,MemoryAddress v7,MemoryAddress v8,MemoryAddress v9,MemoryAddress v10)
    {
        try (var scope = ResourceScope.newConfinedScope();) {
            var allocator = SegmentAllocator.ofScope(scope);
		var vv2 = v2 == null ? MemoryAddress.NULL : toCString(v2, allocator).address();

            var ret = (int) m_sqlite3_create_window_function.invokeExact(v1,vv2,v3,v4,v5,v6,v7,v8,v9,v10);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_create_collation;
    public int sqlite3_create_collation(long v1,String v2,int v3,MemoryAddress v4,MemoryAddress v5)
    {
        try (var scope = ResourceScope.newConfinedScope();) {
            var allocator = SegmentAllocator.ofScope(scope);
		var vv2 = v2 == null ? MemoryAddress.NULL : toCString(v2, allocator).address();

            var ret = (int) m_sqlite3_create_collation.invokeExact(v1,vv2,v3,v4,v5);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_busy_handler;
    public int sqlite3_busy_handler(long v1,MemoryAddress v2,MemoryAddress v3)
    {
        try  {
            
            var ret = (int) m_sqlite3_busy_handler.invokeExact(v1,v2,v3);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_libversion;
    public String sqlite3_libversion()
    {
        try  {
            
            var ret = (MemoryAddress) m_sqlite3_libversion.invokeExact();
            
            return Utils.readString(ret);
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_open_v2;
    public int sqlite3_open_v2(String v1,DBHandle[] v2,int v3,String v4)
    {
        try (var scope = ResourceScope.newConfinedScope();) {
            var allocator = SegmentAllocator.ofScope(scope);
		var vv1 = v1 == null ? MemoryAddress.NULL : toCString(v1, allocator).address();
var vv2 = storeDBHandle(allocator, v2);
var vv4 = v4 == null ? MemoryAddress.NULL : toCString(v4, allocator).address();

            var ret = (int) m_sqlite3_open_v2.invokeExact(vv1,vv2.address(),v3,vv4);
            v2[0] = readDBHandle(vv2, v2[0]);
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_step;
    public int sqlite3_step(long v1)
    {
        try  {
            
            var ret = (int) m_sqlite3_step.invokeExact(v1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_data_count;
    public int sqlite3_data_count(long v1)
    {
        try  {
            
            var ret = (int) m_sqlite3_data_count.invokeExact(v1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_open;
    public int sqlite3_open(String v1,DBHandle[] v2)
    {
        try (var scope = ResourceScope.newConfinedScope();) {
            var allocator = SegmentAllocator.ofScope(scope);
		var vv1 = v1 == null ? MemoryAddress.NULL : toCString(v1, allocator).address();
var vv2 = storeDBHandle(allocator, v2);

            var ret = (int) m_sqlite3_open.invokeExact(vv1,vv2.address());
            v2[0] = readDBHandle(vv2, v2[0]);
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_threadsafe;
    public int sqlite3_threadsafe()
    {
        try  {
            
            var ret = (int) m_sqlite3_threadsafe.invokeExact();
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_errmsg;
    public String sqlite3_errmsg(long v1)
    {
        try  {
            
            var ret = (MemoryAddress) m_sqlite3_errmsg.invokeExact(v1);
            
            return Utils.readString(ret);
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_finalize;
    public int sqlite3_finalize(long v1)
    {
        try  {
            
            var ret = (int) m_sqlite3_finalize.invokeExact(v1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_prepare_v2;
    public int sqlite3_prepare_v2(long v1,String v2,int v3,PrepStmt[] v4,long v5)
    {
        try (var scope = ResourceScope.newConfinedScope();) {
            var allocator = SegmentAllocator.ofScope(scope);
		var vv2 = v2 == null ? MemoryAddress.NULL : toCString(v2, allocator).address();
var vv4 = storePrepStmt(allocator, v4);

            var ret = (int) m_sqlite3_prepare_v2.invokeExact(v1,vv2,v3,vv4.address(),v5);
            v4[0] = readPrepStmt(vv4, v4[0]);
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_reset;
    public int sqlite3_reset(long v1)
    {
        try  {
            
            var ret = (int) m_sqlite3_reset.invokeExact(v1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_prepare_v3;
    public int sqlite3_prepare_v3(long v1,String v2,int v3,int v4,PrepStmt[] v5,long[] v6)
    {
        try (var scope = ResourceScope.newConfinedScope();) {
            var allocator = SegmentAllocator.ofScope(scope);
		var vv2 = v2 == null ? MemoryAddress.NULL : toCString(v2, allocator).address();
var vv5 = storePrepStmt(allocator, v5);
var vv6 = Utils.toMS(allocator, v6);

            var ret = (int) m_sqlite3_prepare_v3.invokeExact(v1,vv2,v3,v4,vv5.address(),Utils.toAddr(vv6));
            v5[0] = readPrepStmt(vv5, v5[0]);Utils.toArr(v6, vv6);

            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_exec;
    public int sqlite3_exec(long v1,String v2,int v3,int v4,String v5)
    {
        try (var scope = ResourceScope.newConfinedScope();) {
            var allocator = SegmentAllocator.ofScope(scope);
		var vv2 = v2 == null ? MemoryAddress.NULL : toCString(v2, allocator).address();
var vv5 = v5 == null ? MemoryAddress.NULL : toCString(v5, allocator).address();

            var ret = (int) m_sqlite3_exec.invokeExact(v1,vv2,v3,v4,vv5);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_close;
    public int sqlite3_close(long v1)
    {
        try  {
            
            var ret = (int) m_sqlite3_close.invokeExact(v1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_sourceid;
    public String sqlite3_sourceid()
    {
        try  {
            
            var ret = (MemoryAddress) m_sqlite3_sourceid.invokeExact();
            
            return Utils.readString(ret);
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_prepare;
    public int sqlite3_prepare(long v1,String v2,int v3,PrepStmt[] v4,long[] v5)
    {
        try (var scope = ResourceScope.newConfinedScope();) {
            var allocator = SegmentAllocator.ofScope(scope);
		var vv2 = v2 == null ? MemoryAddress.NULL : toCString(v2, allocator).address();
var vv4 = storePrepStmt(allocator, v4);
var vv5 = Utils.toMS(allocator, v5);

            var ret = (int) m_sqlite3_prepare.invokeExact(v1,vv2,v3,vv4.address(),Utils.toAddr(vv5));
            v4[0] = readPrepStmt(vv4, v4[0]);Utils.toArr(v5, vv5);

            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_close_v2;
    public int sqlite3_close_v2(long v1)
    {
        try  {
            
            var ret = (int) m_sqlite3_close_v2.invokeExact(v1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_result_int;
    public void sqlite3_result_int(MemoryAddress v1,int v2)
    {
        try  {
            
             m_sqlite3_result_int.invokeExact(v1,v2);
            
            
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_bind_int64;
    public int sqlite3_bind_int64(long v1,int v2,long v3)
    {
        try  {
            
            var ret = (int) m_sqlite3_bind_int64.invokeExact(v1,v2,v3);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_bind_text;
    public int sqlite3_bind_text(long v1,int v2,String v3,int v4,int v5)
    {
        try (var scope = ResourceScope.newConfinedScope();) {
            var allocator = SegmentAllocator.ofScope(scope);
		var vv3 = v3 == null ? MemoryAddress.NULL : toCString(v3, allocator).address();

            var ret = (int) m_sqlite3_bind_text.invokeExact(v1,v2,vv3,v4,v5);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_value_blob;
    public MemoryAddress sqlite3_value_blob(MemoryAddress v1)
    {
        try  {
            
            var ret = (MemoryAddress) m_sqlite3_value_blob.invokeExact(v1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_bind_null;
    public int sqlite3_bind_null(long v1,int v2)
    {
        try  {
            
            var ret = (int) m_sqlite3_bind_null.invokeExact(v1,v2);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_value_type;
    public int sqlite3_value_type(MemoryAddress v1)
    {
        try  {
            
            var ret = (int) m_sqlite3_value_type.invokeExact(v1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_value_text;
    public String sqlite3_value_text(MemoryAddress v1)
    {
        try  {
            
            var ret = (MemoryAddress) m_sqlite3_value_text.invokeExact(v1);
            
            return Utils.readString(ret);
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_column_int;
    public int sqlite3_column_int(long v1,int v2)
    {
        try  {
            
            var ret = (int) m_sqlite3_column_int.invokeExact(v1,v2);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_interrupt;
    public void sqlite3_interrupt(long v1)
    {
        try  {
            
             m_sqlite3_interrupt.invokeExact(v1);
            
            
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_value_int;
    public int sqlite3_value_int(MemoryAddress v1)
    {
        try  {
            
            var ret = (int) m_sqlite3_value_int.invokeExact(v1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_bind_int;
    public int sqlite3_bind_int(long v1,int v2,int v3)
    {
        try  {
            
            var ret = (int) m_sqlite3_bind_int.invokeExact(v1,v2,v3);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_bind_blob;
    public int sqlite3_bind_blob(long v1,int v2,byte[] v3,int v4,int v5)
    {
        try (var scope = ResourceScope.newConfinedScope();) {
            var allocator = SegmentAllocator.ofScope(scope);
		var vv3 = Utils.toMS(allocator, v3);

            var ret = (int) m_sqlite3_bind_blob.invokeExact(v1,v2,Utils.toAddr(vv3),v4,v5);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_changes;
    public int sqlite3_changes(long v1)
    {
        try  {
            
            var ret = (int) m_sqlite3_changes.invokeExact(v1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_strnicmp;
    public int sqlite3_strnicmp(String v1,String v2,int v3)
    {
        try (var scope = ResourceScope.newConfinedScope();) {
            var allocator = SegmentAllocator.ofScope(scope);
		var vv1 = v1 == null ? MemoryAddress.NULL : toCString(v1, allocator).address();
var vv2 = v2 == null ? MemoryAddress.NULL : toCString(v2, allocator).address();

            var ret = (int) m_sqlite3_strnicmp.invokeExact(vv1,vv2,v3);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_limit;
    public int sqlite3_limit(long v1,int v2,int v3)
    {
        try  {
            
            var ret = (int) m_sqlite3_limit.invokeExact(v1,v2,v3);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_sleep;
    public void sqlite3_sleep(int v1)
    {
        try  {
            
             m_sqlite3_sleep.invokeExact(v1);
            
            
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private MethodHandle m_sqlite3_errcode;
    public int sqlite3_errcode(long v1)
    {
        try  {
            
            var ret = (int) m_sqlite3_errcode.invokeExact(v1);
            
            return ret;
        }
        catch(Throwable th)
        {
            throw new Error(th);
        }
    }

    private void init(){
		m_sqlite3_column_decltype = m_methods.get("sqlite3_column_decltype");
		m_sqlite3_column_name = m_methods.get("sqlite3_column_name");
		m_sqlite3_column_type = m_methods.get("sqlite3_column_type");
		m_sqlite3_column_value = m_methods.get("sqlite3_column_value");
		m_sqlite3_compileoption_used = m_methods.get("sqlite3_compileoption_used");
		m_sqlite3_value_int64 = m_methods.get("sqlite3_value_int64");
		m_sqlite3_bind_parameter_count = m_methods.get("sqlite3_bind_parameter_count");
		m_sqlite3_value_double = m_methods.get("sqlite3_value_double");
		m_sqlite3_column_text = m_methods.get("sqlite3_column_text");
		m_sqlite3_value_bytes = m_methods.get("sqlite3_value_bytes");
		m_sqlite3_progress_handler = m_methods.get("sqlite3_progress_handler");
		m_sqlite3_commit_hook = m_methods.get("sqlite3_commit_hook");
		m_sqlite3_rollback_hook = m_methods.get("sqlite3_rollback_hook");
		m_sqlite3_update_hook = m_methods.get("sqlite3_update_hook");
		m_sqlite3_column_bytes = m_methods.get("sqlite3_column_bytes");
		m_sqlite3_column_double = m_methods.get("sqlite3_column_double");
		m_sqlite3_compileoption_get = m_methods.get("sqlite3_compileoption_get");
		m_sqlite3_result_error = m_methods.get("sqlite3_result_error");
		m_sqlite3_column_int64 = m_methods.get("sqlite3_column_int64");
		m_sqlite3_column_table_name = m_methods.get("sqlite3_column_table_name");
		m_sqlite3_bind_double = m_methods.get("sqlite3_bind_double");
		m_sqlite3_column_count = m_methods.get("sqlite3_column_count");
		m_sqlite3_clear_bindings = m_methods.get("sqlite3_clear_bindings");
		m_sqlite3_libversion_number = m_methods.get("sqlite3_libversion_number");
		m_sqlite3_total_changes = m_methods.get("sqlite3_total_changes");
		m_sqlite3_enable_load_extension = m_methods.get("sqlite3_enable_load_extension");
		m_sqlite3_backup_step = m_methods.get("sqlite3_backup_step");
		m_sqlite3_result_text = m_methods.get("sqlite3_result_text");
		m_sqlite3_table_column_metadata = m_methods.get("sqlite3_table_column_metadata");
		m_sqlite3_backup_finish = m_methods.get("sqlite3_backup_finish");
		m_sqlite3_backup_init = m_methods.get("sqlite3_backup_init");
		m_sqlite3_result_int64 = m_methods.get("sqlite3_result_int64");
		m_sqlite3_create_function = m_methods.get("sqlite3_create_function");
		m_sqlite3_enable_shared_cache = m_methods.get("sqlite3_enable_shared_cache");
		m_sqlite3_result_double = m_methods.get("sqlite3_result_double");
		m_sqlite3_busy_timeout = m_methods.get("sqlite3_busy_timeout");
		m_sqlite3_result_blob = m_methods.get("sqlite3_result_blob");
		m_sqlite3_column_blob = m_methods.get("sqlite3_column_blob");
		m_sqlite3_result_null = m_methods.get("sqlite3_result_null");
		m_sqlite3_create_window_function = m_methods.get("sqlite3_create_window_function");
		m_sqlite3_create_collation = m_methods.get("sqlite3_create_collation");
		m_sqlite3_busy_handler = m_methods.get("sqlite3_busy_handler");
		m_sqlite3_libversion = m_methods.get("sqlite3_libversion");
		m_sqlite3_open_v2 = m_methods.get("sqlite3_open_v2");
		m_sqlite3_step = m_methods.get("sqlite3_step");
		m_sqlite3_data_count = m_methods.get("sqlite3_data_count");
		m_sqlite3_open = m_methods.get("sqlite3_open");
		m_sqlite3_threadsafe = m_methods.get("sqlite3_threadsafe");
		m_sqlite3_errmsg = m_methods.get("sqlite3_errmsg");
		m_sqlite3_finalize = m_methods.get("sqlite3_finalize");
		m_sqlite3_prepare_v2 = m_methods.get("sqlite3_prepare_v2");
		m_sqlite3_reset = m_methods.get("sqlite3_reset");
		m_sqlite3_prepare_v3 = m_methods.get("sqlite3_prepare_v3");
		m_sqlite3_exec = m_methods.get("sqlite3_exec");
		m_sqlite3_close = m_methods.get("sqlite3_close");
		m_sqlite3_sourceid = m_methods.get("sqlite3_sourceid");
		m_sqlite3_prepare = m_methods.get("sqlite3_prepare");
		m_sqlite3_close_v2 = m_methods.get("sqlite3_close_v2");
		m_sqlite3_result_int = m_methods.get("sqlite3_result_int");
		m_sqlite3_bind_int64 = m_methods.get("sqlite3_bind_int64");
		m_sqlite3_bind_text = m_methods.get("sqlite3_bind_text");
		m_sqlite3_value_blob = m_methods.get("sqlite3_value_blob");
		m_sqlite3_bind_null = m_methods.get("sqlite3_bind_null");
		m_sqlite3_value_type = m_methods.get("sqlite3_value_type");
		m_sqlite3_value_text = m_methods.get("sqlite3_value_text");
		m_sqlite3_column_int = m_methods.get("sqlite3_column_int");
		m_sqlite3_interrupt = m_methods.get("sqlite3_interrupt");
		m_sqlite3_value_int = m_methods.get("sqlite3_value_int");
		m_sqlite3_bind_int = m_methods.get("sqlite3_bind_int");
		m_sqlite3_bind_blob = m_methods.get("sqlite3_bind_blob");
		m_sqlite3_changes = m_methods.get("sqlite3_changes");
		m_sqlite3_strnicmp = m_methods.get("sqlite3_strnicmp");
		m_sqlite3_limit = m_methods.get("sqlite3_limit");
		m_sqlite3_sleep = m_methods.get("sqlite3_sleep");
		m_sqlite3_errcode = m_methods.get("sqlite3_errcode");
	}
}